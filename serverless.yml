service: ${env:GITHUB_REPO_NAME}

custom:
  PROJECT: nft id

provider: ${file(./serverless-provider.yml)}

package:
  patterns:
    - '!*'
    - '!*/**'
    - 'dist/*'
    - 'dist/*/**'

functions:
  ###### Writers ######
#  writer_saveTopEntitiesByAll:
#    handler: dist/index.writer_saveTopEntitiesByAll
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    timeout: 60
#    events:
#      - schedule: rate(2 minutes) # examples: rate(1 minute), rate(60 minutes)
#  writer_saveTopEntByAllNoRetweets:
#    handler: dist/index.writer_saveTopEntitiesByAllWithoutRetweets
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    timeout: 60
#    events:
#      - schedule: rate(2 minutes) # examples: rate(1 minute), rate(60 minutes)
#  writer_saveTopEntitiesByList:
#    handler: dist/index.writer_saveTopEntitiesByList
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    timeout: 60
#    events:
#      - schedule:
#          rate: rate(1 minute) # examples: rate(1 minute), rate(60 minutes)
#          enabled: true
#          input:
#            pathParameters:
#              listId: "1413118800363458560"
#  ###
#  writer_savePeriodTopEntities:
#    handler: dist/index.writer_cleanAndSavePeriodTopEntities
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    timeout: 60
#    events:
#      - schedule: cron(59 23 * * ? *)
#  writer_savePeriodTopEntNoRetweets:
#    handler: dist/index.writer_cleanAndSavePeriodTopEntitiesWithoutRetweets
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    timeout: 60
#    events:
#      - schedule: cron(59 23 * * ? *)
#  writer_savePeriodTopEnOfList:
#    handler: dist/index.writer_cleanAndSavePeriodTopEntitiesOfList
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    timeout: 60
#    events:
#      - schedule:
#          rate: cron(59 23 * * ? *)
#          enabled: true
#          input:
#            pathParameters:
#              listId: "1413118800363458560"
#  ###
  writer_createPendingRequest:
    handler: dist/index.writer_createPendingRequest
    fileSystemConfig: ${file(./serverless-fs.yml)}
    timeout: 60
    events:
      - http:
          path: createPendingRequest
          method: post
          cors: true
  writer_searchAndVerifyTweets:
    handler: dist/index.writer_searchAndVerifyTweets
    fileSystemConfig: ${file(./serverless-fs.yml)}
    timeout: 60
    events:
      - schedule: rate(1 minute)
  ###### Readers ######
  reader_fetchVerifiedRequest:
    handler: dist/index.reader_fetchVerifiedRequest
    fileSystemConfig: ${file(./serverless-fs.yml)}
    events:
          - http:
              path: fetchVerifiedRequest
              request:
                parameters:
                  querystrings:
                    signature: true
                    json: true
                    openseaUrl: true
              method: get
              cors: true
  reader_viewNFTPage:
    handler: dist/index.reader_viewNFTPage
    fileSystemConfig: ${file(./serverless-fs.yml)}
    timeout: 12
    events:
      - http:
          path: nftPage/{firstPathParam}/{secondPathParam}
          method: get
          cors: true
      - http:
          path: nftPage/{firstPathParam}
          method: get
          cors: true
  reader_viewRegisterPage:
    handler: dist/index.reader_viewRegisterPage
    fileSystemConfig: ${file(./serverless-fs.yml)}
    timeout: 12
    events:
      - http:
          path: register
          method: get
          cors: true
  reader_extractOwnerFromNFTContract:
    handler: dist/index.reader_extractOwnerFromNFTContract
    fileSystemConfig: ${file(./serverless-fs.yml)}
    timeout: 12
    events:
      - http:
          path: extractOwnerFromNFTContract/{contractAddress}/{tokenId}
          method: get
          cors: true
  reader_extractAssetFromNFTContract:
    handler: dist/index.reader_extractAssetFromNFTContract
    fileSystemConfig: ${file(./serverless-fs.yml)}
    timeout: 12
    events:
      - http:
          path: extractAssetFromNFTContract/{contractAddress}/{tokenId}
          method: get
          cors: true
#  reader_fetchTopEntities:
#    handler: dist/index.reader_fetchTopEntities
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    events:
#      - http:
#          path: fetchTopEntities
#          method: get
#          cors: true
#  reader_fetchTopEntNoRetweets:
#    handler: dist/index.reader_fetchTopEntitiesWithoutRetweets
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    events:
#      - http:
#          path: fetchTopEntitiesWithoutRetweets
#          method: get
#          cors: true
#  reader_fetchTopEntitiesOfList:
#    handler: dist/index.reader_fetchTopEntitiesOfList
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    events:
#      - http:
#          path: fetchTopEntitiesOfList/{listId}
#          method: get
#          cors: true
#  ##
#  reader_fetchActiveUsersOfList:
#    handler: dist/index.reader_fetchActiveUsersOfList
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    events:
#      - http:
#          path: fetchActiveUsersOfList/{listId}
#          method: get
#          cors: true
#  ##
#  reader_fetchPeriodTopEntities:
#    handler: dist/index.reader_fetchPeriodTopEntities
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    events:
#      - http:
#          path: fetchPeriodTopEntities
#          method: get
#          cors: true
#  reader_fetchPeriodTopEntNoRetweets:
#    handler: dist/index.reader_fetchPeriodTopEntitiesWithoutRetweets
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    events:
#      - http:
#          path: fetchPeriodTopEntitiesWithoutRetweets
#          method: get
#          cors: true
#  reader_fetchPeriodTopEntitiesOfList:
#    handler: dist/index.reader_fetchPeriodTopEntitiesOfList
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    events:
#      - http:
#          path: fetchPeriodTopEntitiesOfList/{listId}
#          method: get
#          cors: true
#  ##
#  reader_fetchTweetsByTag:
#    handler: dist/index.reader_fetchTweetsByTag
#    fileSystemConfig: ${file(./serverless-fs.yml)}
#    events:
#      - http:
#          path: fetchTweetsByTag/{filter}/{sinceId}
#          request:
#            parameters:
#              querystrings:
#                withoutRetweets: false
#          method: get
#          cors: true
#      - http:
#          path: fetchTweetsByTag/{filter}
#          request:
#            parameters:
#              querystrings:
#                withoutRetweets: false
#          method: get
#          cors: true